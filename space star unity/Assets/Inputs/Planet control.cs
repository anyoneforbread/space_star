//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Planet control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Planetcontrol: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Planetcontrol()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Planet control"",
    ""maps"": [
        {
            ""name"": ""Planet"",
            ""id"": ""d0bcc518-7b5d-4a71-9fbd-0f0127515b7c"",
            ""actions"": [
                {
                    ""name"": ""TapPos"",
                    ""type"": ""Value"",
                    ""id"": ""fbeaeaa0-2c55-49b7-ae08-df62531c71e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""88bfaff1-74fe-425b-8719-9e778af45315"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""testmouse"",
                    ""type"": ""Button"",
                    ""id"": ""cb46c40b-9d5a-46a8-a1eb-7bcf743b3e01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70c94bbf-9462-4001-ae1a-82a2ed354502"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27f3870c-af39-4ed8-8c1c-bbd83f675f6a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c58b53-91ad-4324-8f57-a09e1c11b65a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""testmouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Planet
        m_Planet = asset.FindActionMap("Planet", throwIfNotFound: true);
        m_Planet_TapPos = m_Planet.FindAction("TapPos", throwIfNotFound: true);
        m_Planet_Tap = m_Planet.FindAction("Tap", throwIfNotFound: true);
        m_Planet_testmouse = m_Planet.FindAction("testmouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Planet
    private readonly InputActionMap m_Planet;
    private List<IPlanetActions> m_PlanetActionsCallbackInterfaces = new List<IPlanetActions>();
    private readonly InputAction m_Planet_TapPos;
    private readonly InputAction m_Planet_Tap;
    private readonly InputAction m_Planet_testmouse;
    public struct PlanetActions
    {
        private @Planetcontrol m_Wrapper;
        public PlanetActions(@Planetcontrol wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapPos => m_Wrapper.m_Planet_TapPos;
        public InputAction @Tap => m_Wrapper.m_Planet_Tap;
        public InputAction @testmouse => m_Wrapper.m_Planet_testmouse;
        public InputActionMap Get() { return m_Wrapper.m_Planet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlanetActions set) { return set.Get(); }
        public void AddCallbacks(IPlanetActions instance)
        {
            if (instance == null || m_Wrapper.m_PlanetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlanetActionsCallbackInterfaces.Add(instance);
            @TapPos.started += instance.OnTapPos;
            @TapPos.performed += instance.OnTapPos;
            @TapPos.canceled += instance.OnTapPos;
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @testmouse.started += instance.OnTestmouse;
            @testmouse.performed += instance.OnTestmouse;
            @testmouse.canceled += instance.OnTestmouse;
        }

        private void UnregisterCallbacks(IPlanetActions instance)
        {
            @TapPos.started -= instance.OnTapPos;
            @TapPos.performed -= instance.OnTapPos;
            @TapPos.canceled -= instance.OnTapPos;
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @testmouse.started -= instance.OnTestmouse;
            @testmouse.performed -= instance.OnTestmouse;
            @testmouse.canceled -= instance.OnTestmouse;
        }

        public void RemoveCallbacks(IPlanetActions instance)
        {
            if (m_Wrapper.m_PlanetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlanetActions instance)
        {
            foreach (var item in m_Wrapper.m_PlanetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlanetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlanetActions @Planet => new PlanetActions(this);
    public interface IPlanetActions
    {
        void OnTapPos(InputAction.CallbackContext context);
        void OnTap(InputAction.CallbackContext context);
        void OnTestmouse(InputAction.CallbackContext context);
    }
}
